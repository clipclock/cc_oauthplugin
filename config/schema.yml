propel:
  _attributes:      { package: plugins.sfOauthPropelServerPlugin.lib.model }

  sfoauthserverconsumer:
    _propel_behaviors:
      timestampable: ~
    consumer_key: {type: VARCHAR, size: '40', required: true, unique:true}
    consumer_secret: {type: VARCHAR, size: '40', required: true, unique:true}
    name : {type : VARCHAR, size: '256', required: true}
    description: { type: LONGVARCHAR, required: true}
    protocole: {type: INTEGER, default: 1 }
    base_domain: {type: VARCHAR, size: '256' }
    callback: {type: VARCHAR, size: '256' }
    scope: {type : VARCHAR, size: '256', required: false}
    number_query: { type : INTEGER, default: 0 }
#    relations:
#      Developers: { class: sfGuardUser, refClass: sfOauthServerDeveloper, local: consumer_id, foreign: user_id, foreignAlias: Applications}

  sfoauthserverdeveloper:
    consumer_id: {type: INTEGER, required: true, foreignTable: sfoauthserverconsumer, foreignReference: id}
    user_id: {type: INTEGER, required: true, foreignTable: sf_guard_user, foreignReference: id}
    admin: {type: boolean, default: false}

  sfoauthserverrequesttoken:
    _propel_behaviors:
      symfony:
        form: false
        filter: false
      timestampable: { update_column: created_at }
    token: {type: VARCHAR, size: '40', required: true, unique: true}
    secret: {type: VARCHAR, size: '40', required: false}
    consumer_id: {type: INTEGER, required: true, foreignTable: sfoauthserverconsumer, foreignReference: id}
    user_id: {type: INTEGER, foreignTable: sf_guard_user, foreignReference: id}
    callback: {type: VARCHAR, size: '256' }
    scope: {type : VARCHAR, size: '256', required: false}
    expires: { type: INTEGER}
    protocole: {type: INTEGER, default: 1 }

  sfoauthserveraccesstoken:
    _propel_behaviors:
      symfony:
        form: false
        filter: false
      timestampable: { update_column: created_at }
    token: {type: VARCHAR, size: '40', required: true, unique:true}
    secret: {type: VARCHAR, size: '40', required: false}
    consumer_id: {type: INTEGER, required: true, foreignTable: sfoauthserverconsumer, foreignReference: id}
    user_id: {type: INTEGER, required: false, foreignTable: sf_guard_user, foreignReference: id}
    scope: {type: VARCHAR, size: '256', required: false}
    expires: { type: INTEGER}
    protocole: {type: INTEGER, default: 1 }

   # sfOauthServerNonce protection againts hakers
  sfoauthservernonce:
    _propel_behaviors:
      symfony:
        form: false
        filter: false
      timestampable: { update_column: created_at }
    nonce: {type: VARCHAR, size: '40', required: true, unique:true}

  sfoauthserveruserscope:
    user_id: {type: INTEGER, required: true, foreignTable: sf_guard_user, foreignReference: id}
    consumer_id: {type: INTEGER, required: true, foreignTable: sfoauthserverconsumer, foreignReference: id}
    scope: {type: VARCHAR, size: '256', required: false}


